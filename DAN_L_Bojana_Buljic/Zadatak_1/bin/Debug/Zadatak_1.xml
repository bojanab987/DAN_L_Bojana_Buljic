<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Zadatak_1</name>
    </assembly>
    <members>
        <member name="M:Zadatak_1.Services.Service.GetAllUsers">
            <summary>
            Gets all users from database
            </summary>
            <returns>list of users</returns>
        </member>
        <member name="M:Zadatak_1.Services.Service.GetUserByUsername(System.String)">
            <summary>
            Gets user by forwarded username.
            </summary>
            <param name="username">User's username</param>        
            <returns>User.</returns>
        </member>
        <member name="M:Zadatak_1.Services.Service.AddUser(System.String,System.String)">
            <summary>
            Adds the user
            </summary>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <returns>true for created user, false if not</returns>
        </member>
        <member name="M:Zadatak_1.Services.Service.GetUsersSongs(Zadatak_1.Model.vwUser)">
            <summary>
            Gets all songs of a logged in user from database
            </summary>
            <returns>list of songs</returns>
        </member>
        <member name="M:Zadatak_1.Services.Service.AddSong(Zadatak_1.Model.vwUser,Zadatak_1.Model.vwSong)">
            <summary>
            Method for adding song by user
            </summary>
            <param name="user">user which is adding song</param>
            <param name="song">song for adding</param>
            <returns></returns>
        </member>
        <member name="M:Zadatak_1.Services.Service.SortNameAsc(Zadatak_1.Model.vwUser)">
            <summary>
            Method for sorting Song names ascending
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Zadatak_1.Services.Service.SortNameDesc(Zadatak_1.Model.vwUser)">
            <summary>
            Method for sorting songs descending by song name
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Zadatak_1.Services.Service.SortDurationAsc(Zadatak_1.Model.vwUser)">
            <summary>
            Method for sorting songs ascending by song duration
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Zadatak_1.Services.Service.SortDurationDesc(Zadatak_1.Model.vwUser)">
            <summary>
            Method for sorting songs descending by song duration
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Zadatak_1.Services.Service.DeleteSong(Zadatak_1.Model.vwSong)">
            <summary>
            Method for deleting song from database
            </summary>
            <param name="song"></param>
            <returns>true if deleted, false if not</returns>
        </member>
        <member name="M:Zadatak_1.Services.Service.GetAllPlayedSongs">
            <summary>
            Gets all played songs from database
            </summary>
            <returns>list of played songs</returns>
        </member>
        <member name="M:Zadatak_1.Validations.SongValidation.Validate(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Method for validating song duration
            </summary>
            <param name="value"></param>
            <param name="cultureInfo"></param>
            <returns></returns>       
        </member>
        <member name="M:Zadatak_1.Validations.ValidationClass.IsUniqueUsername(System.String)">
            <summary>
            This method checks if forwarded username is unique.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Zadatak_1.Validations.ValidationClass.PasswordChecker(System.String)">
            <summary>
            Checks if the password is correct
            </summary>
            <param name="password">the password we are checking</param>  
            <returns>true if correct password, false if not</returns>
        </member>
        <member name="M:Zadatak_1.ViewModel.LoginViewModel.LogInExecute(System.Object)">
            <summary>
            This method checks if username and password are valid.
            </summary>
            <param name="password">User input for password.</param>
        </member>
        <member name="M:Zadatak_1.ViewModel.LoginViewModel.CanLogInExecute(System.Object)">
            <summary>
            Method checks if login can be executed.
            </summary>
            <param name="password">User input for password.</param>
            <returns>True if login can execute, false if not.</returns>
        </member>
        <member name="F:Zadatak_1.ViewModel.UserViewModel.addSong">
            <summary>
            Add song Command
            </summary>
        </member>
        <member name="M:Zadatak_1.ViewModel.UserViewModel.AddSongExecute">
            <summary>
            Method to execute add song command, opens the add view for adding new song
            </summary>
        </member>
        <member name="M:Zadatak_1.ViewModel.UserViewModel.CanAddSongExecute">
            <summary>
            Method checks if add song command can be executed
            </summary>
            <returns></returns>
        </member>
        <member name="F:Zadatak_1.ViewModel.UserViewModel.deleteSong">
            <summary>
            Command for deleting song
            </summary>
        </member>
        <member name="M:Zadatak_1.ViewModel.UserViewModel.DeleteSongExecute">
            <summary>
            Method to execute delete command...deleting song
            </summary>
        </member>
        <member name="M:Zadatak_1.ViewModel.UserViewModel.CanDeleteSongExecute">
            <summary>
            Method checks if delete command can be executed
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="F:Zadatak_1.ViewModel.UserViewModel.durationAsc">
            <summary>
            Command for sorting song ascending by song duration
            </summary>
        </member>
        <member name="F:Zadatak_1.ViewModel.UserViewModel.durationDesc">
            <summary>
            Command for sorting sond descending by song duration
            </summary>
        </member>
        <member name="F:Zadatak_1.ViewModel.UserViewModel.nameAsc">
            <summary>
            Comand for sorting songs ascending by song name
            </summary>
        </member>
        <member name="F:Zadatak_1.ViewModel.UserViewModel.nameDesc">
            <summary>
            Comand for sorting songs descending by song name
            </summary>
        </member>
        <member name="E:Zadatak_1.ViewModel.ViewModelBase.PropertyChanged">
            <summary>
            Event raised when some property is changed
            </summary>
        </member>
        <member name="M:Zadatak_1.ViewModel.ViewModelBase.OnPropertyChanged(System.String)">
            <summary>
            Register each change on control/command binded for a Property
            </summary>
            <param name="propertyName">string parameter for a property name</param>
        </member>
        <member name="T:Zadatak_1.View.AddView">
            <summary>
            Interaction logic for AddView.xaml
            </summary>
            <summary>
            AddView
            </summary>
        </member>
        <member name="M:Zadatak_1.View.AddView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Zadatak_1.View.LoginView">
            <summary>
            Interaction logic for LoginView.xaml
            </summary>
            <summary>
            LoginView
            </summary>
        </member>
        <member name="M:Zadatak_1.View.LoginView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Zadatak_1.View.UserView">
            <summary>
            Interaction logic for UserView.xaml
            </summary>
            <summary>
            UserView
            </summary>
        </member>
        <member name="M:Zadatak_1.View.UserView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Zadatak_1.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:Zadatak_1.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:Zadatak_1.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="M:Zadatak_1.Commands.RelayCommand.CanExecute(System.Object)">
            <summary>
            Method for check if command should be executed
            </summary>
            <param name="parameter">object parameter</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Zadatak_1.Commands.RelayCommand.Execute(System.Object)">
            <summary>
            Do the functionality of executing command
            </summary>
            <param name="parameter">object parameter</param>
        </member>
        <member name="T:Zadatak_1.MainWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="M:Zadatak_1.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Zadatak_1.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Zadatak_1.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Zadatak_1.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
